diff --git a/abis/osdev/auxv.h b/abis/osdev/auxv.h
new file mode 100644
index 0000000..fb79332
--- /dev/null
+++ b/abis/osdev/auxv.h
@@ -0,0 +1,19 @@
+#ifndef _ABIBITS_AUXV_H
+#define _ABIBITS_AUXV_H
+
+#define AT_PHDR 3
+#define AT_PHENT 4
+#define AT_PHNUM 5
+#define AT_ENTRY 9
+#define AT_SECURE 23
+#define AT_RANDOM 25
+#define AT_EXECFN 31
+
+// managarm specific auxvector entries.
+
+#define AT_XPIPE 0x1000
+#define AT_OPENFILES 0x1001
+#define AT_FS_SERVER 0x1102
+#define AT_MBUS_SERVER 0x1103
+
+#endif // _ABIBITS_AUXV_H
diff --git a/meson.build b/meson.build
index edcd230..eb24bb0 100644
--- a/meson.build
+++ b/meson.build
@@ -97,6 +97,11 @@ elif host_machine.system() == 'managarm'
 	internal_conf.set('MLIBC_MAP_DSO_SEGMENTS', true)
 	internal_conf.set('MLIBC_MAP_FILE_WINDOWS', true)
 	subdir('sysdeps/managarm')
+elif host_machine.system() == 'osdev'
+	disable_linux_option = true
+	rtdl_include_dirs += include_directories('sysdeps/osdev/include')
+	libc_include_dirs += include_directories('sysdeps/osdev/include')
+	subdir('sysdeps/osdev')
 elif host_machine.system() == 'qword'
 	disable_linux_option = true
 	rtdl_include_dirs += include_directories('sysdeps/qword/include')
diff --git a/sysdeps/osdev/crt-x86_64/crt0.S b/sysdeps/osdev/crt-x86_64/crt0.S
new file mode 100755
index 0000000..190b5a0
--- /dev/null
+++ b/sysdeps/osdev/crt-x86_64/crt0.S
@@ -0,0 +1,8 @@
+.section .text
+
+.global _start
+_start:
+    mov $main, %rdi
+    call __mlibc_entry
+
+.size _start, . - _start
diff --git a/sysdeps/osdev/generic/entry.cpp b/sysdeps/osdev/generic/entry.cpp
new file mode 100644
index 0000000..265ab56
--- /dev/null
+++ b/sysdeps/osdev/generic/entry.cpp
@@ -0,0 +1,32 @@
+#include <stdint.h>
+#include <stdlib.h>
+#include <bits/ensure.h>
+#include <mlibc/elf/startup.h>
+
+// defined by the POSIX library
+void __mlibc_initLocale();
+
+extern "C" uintptr_t *__dlapi_entrystack();
+
+extern char **environ;
+static mlibc::exec_stack_data __mlibc_stack_data;
+
+struct LibraryGuard {
+	LibraryGuard();
+};
+
+static LibraryGuard guard;
+
+LibraryGuard::LibraryGuard() {
+	__mlibc_initLocale();
+
+	// Parse the exec() stack.
+	mlibc::parse_exec_stack(__dlapi_entrystack(), &__mlibc_stack_data);
+	mlibc::set_startup_data(__mlibc_stack_data.argc, __mlibc_stack_data.argv,
+			__mlibc_stack_data.envp);
+}
+
+extern "C" void __mlibc_entry(int (*main_fn)(int argc, char *argv[], char *env[])) {
+	auto result = main_fn(__mlibc_stack_data.argc, __mlibc_stack_data.argv, environ);
+	exit(result);
+}
diff --git a/sysdeps/osdev/generic/generic.cpp b/sysdeps/osdev/generic/generic.cpp
new file mode 100644
index 0000000..c49511c
--- /dev/null
+++ b/sysdeps/osdev/generic/generic.cpp
@@ -0,0 +1,299 @@
+#include <bits/ensure.h>
+#include <mlibc/debug.hpp>
+#include <mlibc/all-sysdeps.hpp>
+#include <mlibc/thread-entry.hpp>
+#include <errno.h>
+#include <dirent.h>
+#include <fcntl.h>
+#include <limits.h>
+
+namespace mlibc {
+
+  void sys_libc_log(const char *message) {
+    unsigned long res;
+    asm volatile ("syscall" : "=a"(res)
+    : "a"(50), "D"(message)
+    : "rcx", "r11", "rdx");
+  }
+
+  void sys_libc_panic() {
+    mlibc::infoLogger() << "\e[31mmlibc: panic!" << frg::endlog;
+    asm volatile ("syscall" :
+    : "a"(12), "D"(1)
+    : "rcx", "r11", "rdx");
+  }
+
+  int sys_tcb_set(void *pointer) {
+    int res;
+    asm volatile ("syscall" : "=a"(res)
+    : "a"(300), "D"(pointer)
+    : "rcx", "r11", "rdx");
+    return res;
+  }
+
+  int sys_anon_allocate(size_t size, void **pointer) {
+    void *ret;
+    int sys_errno;
+
+    asm volatile ("syscall"
+    : "=a"(ret), "=d"(sys_errno)
+    : "a"(9), "D"(0), "S"(size)
+    : "rcx", "r11");
+
+    if (!ret)
+      return sys_errno;
+
+    *pointer = ret;
+    return 0;
+  }
+
+  int sys_anon_free(void *pointer, size_t size) {
+    int unused_return;
+    int sys_errno;
+
+    asm volatile ("syscall"
+    : "=a"(unused_return), "=d"(sys_errno)
+    : "a"(11), "D"(pointer), "S"(size)
+    : "rcx", "r11");
+
+    if (unused_return)
+      return sys_errno;
+
+    return 0;
+  }
+
+#ifndef MLIBC_BUILDING_RTDL
+  void sys_exit(int status) {
+    asm volatile ("syscall" :
+    : "a"(12), "D"(status)
+    : "rcx", "r11", "rdx");
+  }
+#endif
+
+#ifndef MLIBC_BUILDING_RTDL
+  int sys_clock_get(int clock, time_t *secs, long *nanos) {
+    return 0;
+  }
+#endif
+
+  int sys_open(const char *path, int flags, int *fd) {
+    int ret;
+    int sys_errno;
+
+    asm volatile ("syscall"
+    : "=a"(ret), "=d"(sys_errno)
+    : "a"(2), "D"(path), "S"(flags), "d"(0)
+    : "rcx", "r11");
+
+    if (ret == -1)
+      return sys_errno;
+
+    *fd = ret;
+    return 0;
+  }
+
+  int sys_close(int fd) {
+    int ret;
+    int sys_errno;
+
+    asm volatile ("syscall"
+    : "=a"(ret), "=d"(sys_errno)
+    : "a"(3), "D"(fd)
+    : "rcx", "r11");
+
+    if (ret == -1)
+      return sys_errno;
+
+    return 0;
+  }
+
+  int sys_read(int fd, void *buf, size_t count, ssize_t *bytes_read) {
+    ssize_t ret;
+    int sys_errno;
+
+    asm volatile ("syscall"
+    : "=a"(ret), "=d"(sys_errno)
+    : "a"(0), "D"(fd), "S"(buf), "d"(count)
+    : "rcx", "r11");
+
+    if (ret == -1)
+      return sys_errno;
+
+    *bytes_read = ret;
+    return 0;
+  }
+
+#ifndef MLIBC_BUILDING_RTDL
+  int sys_write(int fd, const void *buf, size_t count, ssize_t *bytes_written) {
+    ssize_t ret;
+    int sys_errno;
+
+    asm volatile ("syscall"
+    : "=a"(ret), "=d"(sys_errno)
+    : "a"(1), "D"(fd), "S"(buf), "d"(count)
+    : "rcx", "r11");
+
+    if (ret == -1)
+      return sys_errno;
+
+    *bytes_written = ret;
+    return 0;
+  }
+#endif
+
+
+  int sys_seek(int fd, off_t offset, int whence, off_t *new_offset) {
+    off_t ret;
+    int sys_errno;
+
+    asm volatile ("syscall"
+    : "=a"(ret), "=d"(sys_errno)
+    : "a"(8), "D"(fd), "S"(offset), "d"(whence)
+    : "rcx", "r11");
+
+    if (ret == -1)
+      return sys_errno;
+
+    *new_offset = ret;
+    return 0;
+  }
+
+  int sys_vm_map(void *hint, size_t size, int prot, int flags,
+                 int fd, off_t offset, void **window) {
+    __ensure(flags & MAP_ANONYMOUS);
+    void *ret;
+    int sys_errno;
+
+    // mlibc::infoLogger() << "calling sys_vm_map with size: " << size << frg::endlog;
+
+    asm volatile ("syscall"
+    : "=a"(ret), "=d"(sys_errno)
+    : "a"(9), "D"(hint), "S"(size)
+    : "rcx", "r11");
+
+    if (!ret)
+      return sys_errno;
+
+    *window = ret;
+
+    return 0;
+  }
+
+  int sys_vm_unmap(void *pointer, size_t size) {
+    return sys_anon_free(pointer, size);
+  }
+
+  int sys_futex_wait(int *pointer, int expected) {
+    uint64_t err;
+    asm volatile ("syscall"
+    : "=d"(err)
+    : "a"(66), "D"(pointer), "S"(expected)
+    : "rcx", "r11");
+
+    if (err) {
+      return -1;
+    }
+
+    return 0;
+  }
+
+  int sys_futex_wake(int *pointer) {
+    uint64_t err;
+    asm volatile ("syscall"
+    : "=d"(err)
+    : "a"(65), "D"(pointer)
+    : "rcx", "r11");
+
+    if (err) {
+      return -1;
+    }
+
+    return 0;
+  }
+
+// All remaining functions are disabled in ldso.
+#ifndef MLIBC_BUILDING_RTDL
+
+  int sys_clone(void *entry, void *user_arg, void *tcb, pid_t *tid_out) {
+    void *sp = prepare_stack(entry, user_arg, tcb);
+    int tid;
+
+    asm volatile ("syscall"
+    : "=a"(tid)
+    : "a"(67), "D"(__mlibc_start_thread), "S"(sp), "d"(tcb)
+    : "rcx", "r11");
+
+    if (tid_out)
+      *tid_out = tid;
+
+    return 0;
+  }
+
+  void sys_thread_exit() {
+    asm volatile ("syscall"
+    :
+    : "a"(68)
+    : "rcx", "r11");
+    __builtin_trap();
+  }
+
+  int sys_sleep(time_t *secs, long *nanos) {
+    long ms = (*nanos / 1000000) + (*secs * 1000);
+    asm volatile ("syscall"
+    :
+    : "a"(6), "D"(ms)
+    : "rcx", "r11");
+    *secs = 0;
+    *nanos = 0;
+    return 0;
+  }
+
+  int sys_fork(pid_t *child) {
+    pid_t ret;
+    int sys_errno;
+
+    asm volatile ("syscall"
+    : "=a"(ret), "=d"(sys_errno)
+    : "a"(57)
+    : "rcx", "r11");
+
+    if (ret == -1)
+      return sys_errno;
+
+    *child = ret;
+    return 0;
+  }
+
+  int sys_execve(const char *path, char *const argv[], char *const envp[]) {
+    int ret;
+    int sys_errno;
+
+    asm volatile ("syscall"
+    : "=a"(ret), "=d"(sys_errno)
+    : "a"(59), "D"(path), "S"(argv), "d"(envp)
+    : "rcx", "r11");
+
+    if (sys_errno != 0)
+      return sys_errno;
+
+    return 0;
+  }
+
+  pid_t sys_getpid() {
+    pid_t pid;
+    asm volatile ("syscall" : "=a"(pid)
+    : "a"(5)
+    : "rcx", "r11", "rdx");
+    return pid;
+  }
+  pid_t sys_getppid() {
+    pid_t ppid;
+    asm volatile ("syscall" : "=a"(ppid)
+    : "a"(14)
+    : "rcx", "r11", "rdx");
+    return ppid;
+  }
+
+#endif // MLIBC_BUILDING_RTDL
+
+} // namespace mlibc
diff --git a/sysdeps/osdev/generic/thread.cpp b/sysdeps/osdev/generic/thread.cpp
new file mode 100644
index 0000000..50d3944
--- /dev/null
+++ b/sysdeps/osdev/generic/thread.cpp
@@ -0,0 +1,44 @@
+#include <mlibc/thread-entry.hpp>
+#include <mlibc/all-sysdeps.hpp>
+#include <mlibc/tcb.hpp>
+#include <bits/ensure.h>
+#include <sys/mman.h>
+#include <stdint.h>
+#include <stddef.h>
+
+extern "C" void __mlibc_enter_thread(void *entry, void *user_arg, Tcb *tcb) {
+	// Wait until our parent sets up the TID.
+	while(!__atomic_load_n(&tcb->tid, __ATOMIC_RELAXED))
+		mlibc::sys_futex_wait(&tcb->tid, 0);
+
+	if(mlibc::sys_tcb_set(tcb))
+		__ensure(!"sys_tcb_set() failed");
+
+	void *(*func)(void *) = reinterpret_cast<void *(*)(void *)>(entry);
+	auto result = func(user_arg);
+
+	auto self = reinterpret_cast<Tcb *>(tcb);
+
+	self->returnValue = result;
+	__atomic_store_n(&self->didExit, 1, __ATOMIC_RELEASE);
+	mlibc::sys_futex_wake(&self->didExit);
+
+	mlibc::sys_thread_exit();
+}
+
+namespace mlibc {
+
+void* prepare_stack(void *entry, void *user_arg, void *tcb) {
+	uintptr_t *sp = reinterpret_cast<uintptr_t *>(reinterpret_cast<uintptr_t>(
+			mmap(nullptr, 0x1000000, 
+				PROT_READ | PROT_WRITE, 
+				MAP_PRIVATE | MAP_ANONYMOUS, -1, 0)
+			) + 0x1000000);
+
+	*--sp = reinterpret_cast<uintptr_t>(tcb);
+	*--sp = reinterpret_cast<uintptr_t>(user_arg);
+	*--sp = reinterpret_cast<uintptr_t>(entry);
+	return sp;
+}
+
+} //namespace mlibc
diff --git a/sysdeps/osdev/generic/thread_entry.S b/sysdeps/osdev/generic/thread_entry.S
new file mode 100644
index 0000000..ac321e6
--- /dev/null
+++ b/sysdeps/osdev/generic/thread_entry.S
@@ -0,0 +1,9 @@
+
+.section .text
+.global __mlibc_start_thread
+__mlibc_start_thread:
+	pop %rdi
+	pop %rsi
+	pop %rdx
+	call __mlibc_enter_thread
+
diff --git a/sysdeps/osdev/include/abi-bits/abi.h b/sysdeps/osdev/include/abi-bits/abi.h
new file mode 120000
index 0000000..c945860
--- /dev/null
+++ b/sysdeps/osdev/include/abi-bits/abi.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/abi.h
\ No newline at end of file
diff --git a/sysdeps/osdev/include/abi-bits/auxv.h b/sysdeps/osdev/include/abi-bits/auxv.h
new file mode 120000
index 0000000..2e2c982
--- /dev/null
+++ b/sysdeps/osdev/include/abi-bits/auxv.h
@@ -0,0 +1 @@
+../../../../abis/osdev/auxv.h
\ No newline at end of file
diff --git a/sysdeps/osdev/include/abi-bits/blkcnt_t.h b/sysdeps/osdev/include/abi-bits/blkcnt_t.h
new file mode 120000
index 0000000..e9d9f1b
--- /dev/null
+++ b/sysdeps/osdev/include/abi-bits/blkcnt_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/blkcnt_t.h
\ No newline at end of file
diff --git a/sysdeps/osdev/include/abi-bits/blksize_t.h b/sysdeps/osdev/include/abi-bits/blksize_t.h
new file mode 120000
index 0000000..c6dfb6e
--- /dev/null
+++ b/sysdeps/osdev/include/abi-bits/blksize_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/blksize_t.h
\ No newline at end of file
diff --git a/sysdeps/osdev/include/abi-bits/dev_t.h b/sysdeps/osdev/include/abi-bits/dev_t.h
new file mode 120000
index 0000000..0c1143b
--- /dev/null
+++ b/sysdeps/osdev/include/abi-bits/dev_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/dev_t.h
\ No newline at end of file
diff --git a/sysdeps/osdev/include/abi-bits/errno.h b/sysdeps/osdev/include/abi-bits/errno.h
new file mode 120000
index 0000000..589859f
--- /dev/null
+++ b/sysdeps/osdev/include/abi-bits/errno.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/errno.h
\ No newline at end of file
diff --git a/sysdeps/osdev/include/abi-bits/fcntl.h b/sysdeps/osdev/include/abi-bits/fcntl.h
new file mode 120000
index 0000000..ea5323a
--- /dev/null
+++ b/sysdeps/osdev/include/abi-bits/fcntl.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/fcntl.h
\ No newline at end of file
diff --git a/sysdeps/osdev/include/abi-bits/gid_t.h b/sysdeps/osdev/include/abi-bits/gid_t.h
new file mode 120000
index 0000000..6a77218
--- /dev/null
+++ b/sysdeps/osdev/include/abi-bits/gid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/gid_t.h
\ No newline at end of file
diff --git a/sysdeps/osdev/include/abi-bits/in.h b/sysdeps/osdev/include/abi-bits/in.h
new file mode 120000
index 0000000..b58c683
--- /dev/null
+++ b/sysdeps/osdev/include/abi-bits/in.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/in.h
\ No newline at end of file
diff --git a/sysdeps/osdev/include/abi-bits/ino_t.h b/sysdeps/osdev/include/abi-bits/ino_t.h
new file mode 120000
index 0000000..10d644e
--- /dev/null
+++ b/sysdeps/osdev/include/abi-bits/ino_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/ino_t.h
\ No newline at end of file
diff --git a/sysdeps/osdev/include/abi-bits/mode_t.h b/sysdeps/osdev/include/abi-bits/mode_t.h
new file mode 120000
index 0000000..29d7733
--- /dev/null
+++ b/sysdeps/osdev/include/abi-bits/mode_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/mode_t.h
\ No newline at end of file
diff --git a/sysdeps/osdev/include/abi-bits/nlink_t.h b/sysdeps/osdev/include/abi-bits/nlink_t.h
new file mode 120000
index 0000000..7618c27
--- /dev/null
+++ b/sysdeps/osdev/include/abi-bits/nlink_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/nlink_t.h
\ No newline at end of file
diff --git a/sysdeps/osdev/include/abi-bits/pid_t.h b/sysdeps/osdev/include/abi-bits/pid_t.h
new file mode 120000
index 0000000..3fd26a7
--- /dev/null
+++ b/sysdeps/osdev/include/abi-bits/pid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/pid_t.h
\ No newline at end of file
diff --git a/sysdeps/osdev/include/abi-bits/resource.h b/sysdeps/osdev/include/abi-bits/resource.h
new file mode 120000
index 0000000..3e59c75
--- /dev/null
+++ b/sysdeps/osdev/include/abi-bits/resource.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/resource.h
\ No newline at end of file
diff --git a/sysdeps/osdev/include/abi-bits/seek-whence.h b/sysdeps/osdev/include/abi-bits/seek-whence.h
new file mode 120000
index 0000000..3bd41ef
--- /dev/null
+++ b/sysdeps/osdev/include/abi-bits/seek-whence.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/seek-whence.h
\ No newline at end of file
diff --git a/sysdeps/osdev/include/abi-bits/signal.h b/sysdeps/osdev/include/abi-bits/signal.h
new file mode 120000
index 0000000..b20e511
--- /dev/null
+++ b/sysdeps/osdev/include/abi-bits/signal.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/signal.h
\ No newline at end of file
diff --git a/sysdeps/osdev/include/abi-bits/socket.h b/sysdeps/osdev/include/abi-bits/socket.h
new file mode 120000
index 0000000..0e1d6be
--- /dev/null
+++ b/sysdeps/osdev/include/abi-bits/socket.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/socket.h
\ No newline at end of file
diff --git a/sysdeps/osdev/include/abi-bits/stat.h b/sysdeps/osdev/include/abi-bits/stat.h
new file mode 120000
index 0000000..82642c3
--- /dev/null
+++ b/sysdeps/osdev/include/abi-bits/stat.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/stat.h
\ No newline at end of file
diff --git a/sysdeps/osdev/include/abi-bits/termios.h b/sysdeps/osdev/include/abi-bits/termios.h
new file mode 120000
index 0000000..cfcfe76
--- /dev/null
+++ b/sysdeps/osdev/include/abi-bits/termios.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/termios.h
\ No newline at end of file
diff --git a/sysdeps/osdev/include/abi-bits/time.h b/sysdeps/osdev/include/abi-bits/time.h
new file mode 120000
index 0000000..97f3d52
--- /dev/null
+++ b/sysdeps/osdev/include/abi-bits/time.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/time.h
\ No newline at end of file
diff --git a/sysdeps/osdev/include/abi-bits/uid_t.h b/sysdeps/osdev/include/abi-bits/uid_t.h
new file mode 120000
index 0000000..1113eba
--- /dev/null
+++ b/sysdeps/osdev/include/abi-bits/uid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/uid_t.h
\ No newline at end of file
diff --git a/sysdeps/osdev/include/abi-bits/vm-flags.h b/sysdeps/osdev/include/abi-bits/vm-flags.h
new file mode 120000
index 0000000..f1a985e
--- /dev/null
+++ b/sysdeps/osdev/include/abi-bits/vm-flags.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/vm-flags.h
\ No newline at end of file
diff --git a/sysdeps/osdev/include/abi-bits/wait.h b/sysdeps/osdev/include/abi-bits/wait.h
new file mode 120000
index 0000000..6d911c7
--- /dev/null
+++ b/sysdeps/osdev/include/abi-bits/wait.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/wait.h
\ No newline at end of file
diff --git a/sysdeps/osdev/include/mlibc/thread-entry.hpp b/sysdeps/osdev/include/mlibc/thread-entry.hpp
new file mode 100644
index 0000000..2dd88a6
--- /dev/null
+++ b/sysdeps/osdev/include/mlibc/thread-entry.hpp
@@ -0,0 +1,10 @@
+#pragma once
+
+#include <mlibc/tcb.hpp>
+
+extern "C" void __mlibc_start_thread(void);
+extern "C" void __mlibc_enter_thread(void *entry, void *user_arg, Tcb *tcb);
+
+namespace mlibc {
+	void *prepare_stack(void *entry, void *user_arg, void *tcb);
+}
diff --git a/sysdeps/osdev/include/osdev/syscalls.h b/sysdeps/osdev/include/osdev/syscalls.h
new file mode 120000
index 0000000..6725856
--- /dev/null
+++ b/sysdeps/osdev/include/osdev/syscalls.h
@@ -0,0 +1 @@
+../../../../../../include/common/syscalls.h
\ No newline at end of file
diff --git a/sysdeps/osdev/meson.build b/sysdeps/osdev/meson.build
new file mode 100644
index 0000000..28b6b1d
--- /dev/null
+++ b/sysdeps/osdev/meson.build
@@ -0,0 +1,55 @@
+
+rtdl_sources += files(
+	'generic/generic.cpp'
+)
+
+libc_sources += files(
+	'generic/entry.cpp',
+	'generic/generic.cpp',
+	'generic/thread.cpp',
+	'generic/thread_entry.S'
+)
+
+if not no_headers
+	install_headers(
+		'include/abi-bits/abi.h',
+		'include/abi-bits/auxv.h',
+		'include/abi-bits/seek-whence.h',
+		'include/abi-bits/vm-flags.h',
+		'include/abi-bits/errno.h',
+		'include/abi-bits/fcntl.h',
+		'include/abi-bits/in.h',
+		'include/abi-bits/resource.h',
+		'include/abi-bits/stat.h',
+		'include/abi-bits/signal.h',
+		'include/abi-bits/socket.h',
+		'include/abi-bits/termios.h',
+		'include/abi-bits/blkcnt_t.h',
+		'include/abi-bits/blksize_t.h',
+		'include/abi-bits/dev_t.h',
+		'include/abi-bits/gid_t.h',
+		'include/abi-bits/ino_t.h',
+		'include/abi-bits/mode_t.h',
+		'include/abi-bits/nlink_t.h',
+		'include/abi-bits/pid_t.h',
+		'include/abi-bits/uid_t.h',
+		'include/abi-bits/wait.h',
+		subdir: 'abi-bits'
+	)
+	install_headers(
+        'include/osdev/syscalls.h',
+        subdir: 'osdev'
+    )
+endif
+
+if not headers_only
+	crt = custom_target('crt0',
+		build_by_default: true,
+		command: c_compiler.cmd_array() + ['-c', '-o', '@OUTPUT@', '@INPUT@'],
+		input: 'crt-x86_64/crt0.S',
+		output: 'crt0.o',
+		install: true,
+		install_dir: get_option('libdir')
+	)
+endif
+
